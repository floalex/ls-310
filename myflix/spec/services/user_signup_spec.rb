require 'rails_helper'

describe UserSignup do
  describe "#sign_up" do
    context "valid personal info and valid card" do
      let(:customer) { double(:customer, successful?: true, customer_token: 'abcdefg') }
      before { expect(StripeWrapper::Customer).to receive(:create) { customer } }
      after { ActionMailer::Base.deliveries.clear }
      
      it "creates the user" do
        UserSignup.new(Fabricate.build(:user)).sign_up("so_me_stripe_token", nil) 
        expect(User.count).to eq(1)
      end
      
      it "stores the customer token generated by stripe" do
        UserSignup.new(Fabricate.build(:user)).sign_up("so_me_stripe_token", nil) 
        expect(User.first.stripe_customer_token).to eq('abcdefg')
      end
      
      it "makes the user follow the inviter" do
        alice = Fabricate(:user)
        invitation = Fabricate(:invitation, inviter: alice, recipient_email: 'joe@example.com')
        UserSignup.new(Fabricate.build(:user, 
                                       email: 'joe@example.com', 
                                       password: 'password',
                                       full_name: 'Joe Doe'))
                  .sign_up("so_me_stripe_token", invitation.token)                     
        joe = User.find_by(email: 'joe@example.com')
        expect(joe.follows?(alice)).to be_truthy
      end
      
      it "makes the inviter follow the user" do
        alice = Fabricate(:user)
        invitation = Fabricate(:invitation, inviter: alice, recipient_email: 'joe@example.com')
        UserSignup.new(Fabricate.build(:user, 
                                       email: 'joe@example.com', 
                                       password: 'password',
                                       full_name: 'Joe Doe'))
                  .sign_up("so_me_stripe_token", invitation.token)
        joe = User.find_by(email: 'joe@example.com')
        expect(alice.follows?(joe)).to be_truthy
      end
      
      it "expires the invitation token upon acceptance" do
        alice = Fabricate(:user)
        invitation = Fabricate(:invitation, inviter: alice, recipient_email: 'joe@example.com')
        UserSignup.new(Fabricate.build(:user, 
                                       email: 'joe@example.com', 
                                       password: 'password',
                                       full_name: 'Joe Doe'))
                  .sign_up("so_me_stripe_token", invitation.token)
        expect(Invitation.first.token).to be_nil
      end   
      
      it "sends out email to the user with valid inputs" do
        Sidekiq::Testing.inline! do
          UserSignup.new(Fabricate.build(:user, email: "joe@example.com")).sign_up("so_me_stripe_token", nil)
          expect(ActionMailer::Base.deliveries.last.to).to eq(['joe@example.com'])
        end
      end
      
      it "sends out email containing the user's name with valid inputs" do
        Sidekiq::Testing.inline! do
          UserSignup.new(Fabricate.build(:user, full_name: "Joe Smith", email: "joe@example.com")).sign_up("so_me_stripe_token", nil)
          expect(ActionMailer::Base.deliveries.last.body).to include("Joe Smith")
        end
      end
    end
    
    context "valid personal info and declined card" do
      it "does not create a new user record" do
        customer = double(:customer, successful?: false, error_message: "Your card was declined.")
        StripeWrapper::Customer.stub(:create).and_return(customer)
        UserSignup.new(Fabricate.build(:user)).sign_up("1231241", nil)
        expect(User.count).to eq(0)
      end
    end
    
    context "with invalid personal info" do
      
      it "does not create the user" do
        UserSignup.new(User.new(password: "password", full_name: "Foo Bar")).sign_up("1231241", nil)
        expect(User.count).to eq(0)
      end
      
      it "does not charge the credit card" do
         expect(StripeWrapper::Customer).not_to receive(:create)
         UserSignup.new(User.new(password: "password", full_name: "Foo Bar")).sign_up("1231241", nil)
      end
              
      it "does not send out email to the user with invalid inputs" do
        UserSignup.new(User.new(email: "joe@example.com")).sign_up("1231241", nil)
        expect(ActionMailer::Base.deliveries).to be_empty
      end
      
    end
  end
end